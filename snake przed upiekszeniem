/*
****************** BIBLIOGRAFIA *********************
- Podczas tworzenia gry inspirowałem się serią poradników
NVitanovic'a -> https://www.youtube.com/watch?v=E_-lMZDi7Uw&ab_channel=NVitanovic
- enum - https://www.w3schools.com/cpp/cpp_enum.asp
- sleep - https://www.geeksforgeeks.org/sleep-function-in-cpp/

                        Przedstawiam przed szanownym profesorem Michałem Hylą
                        Moją cudowną grę w węża(gra to dużo powiedziane)
                        (proszę o litość serio chciałbym zdać ten przedmiot)
*/
// zeby owocek na poczatku generowal sie losowo
#include <time.h>
#include <iostream>
// do inputu
#include <conio.h>
// do sleep'a
#include <windows.h>
//sterowanie z zajec z literką M
#define KEY_UP 72
#define KEY_DOWN 80
#define KEY_LEFT 75
#define KEY_RIGHT 77

using namespace std;
//Rozmiar mapy
const int width = 40, height = 20;
//Współrzędne głowy
int HeadX, HeadY;
//Współrzędne owocka
int FX, Fy;
//Wynik
int wynik;
//enum to coś nowego czego sie nauczylem(zerżnąłem z w3schools)
//służy do ograniczenia wartości które może przyjąć zmienna
enum kierunek { STOP = 0,UP, DOWN, LEFT, RIGHT };
//przechowuje wartosc enuma
kierunek kierunken;
bool gameover;
int Xogona[800], Yogona[800];
int Dogona;


//Funkcja przechowuje startowe parametry gry
void Start() {
    gameover = false;
    //waz nie bedzie sie slizgal do poki nie zostanie
    //wybrany kierunek(ślizgoni top tylko czarodzieje czystej krwi)
    kierunken = STOP;
    //startowe wspolrzedne glowy, wysokosc i szerokosc sa dzielone na 2 zzeby wycentrowac
    HeadX = width/2;
    HeadY = height/2;
    //wspolrzedne startowe owocka(randomowe, musi sie zmiescic w granicy mapy)
    FX = rand() % width;
    Fy = rand() % height;
    //startowy wynik
    wynik =0;



}

//Rysowanie mapy i obiektow
void Rysowanie() {
    //czyszczenie konsoli po kazdej iteracji
    system("cls");
    //górna ściana
    for (int i = 0; i < width+3; i++) {
        cout << "#";
    }
        cout << endl;
    //Reszta mapy, wąż i owoc
    for (int i = 0; i < height; i++) {
        for (int j = 0; j <= width; j++) {
            //Lewa ściana
            if (j == 0) {
                cout << "#";
            }
            //Głowa
            if (i == HeadY && j == HeadX) {
                cout<< "0";
            }
            //owocek
            else if(i==Fy && j ==FX) {
                cout<< "1";
            }
            else {
                bool print = false;
                for (int k = 0; k < Dogona; k++) {
                    if(Xogona[k] == j && Yogona[k] == i) {
                        cout<<"o";
                        print = true;
                }
                    }
                if(!print) {
                    cout<<" ";
                }
            }


            //prawa ściana
            if (j == width) {
                cout << "#";
            }
        }
        cout << endl;
    }

    //dolna ściana
    for (int i = 0; i < width+3; i++) {
        cout << "#";
    }
    cout << endl;
    //Wyświetlenie wyniku
    cout << "Wynik: " << wynik << endl;
        }
//funckaj obsługująca inputy z klawiatury
void Input() {
    if(_kbhit()) {
        switch (_getch()) {
            case KEY_LEFT:
                kierunken = LEFT;
            break;
            case KEY_RIGHT:
                kierunken = RIGHT;
            break;
            case KEY_UP:
                kierunken = UP;
            break;
            case KEY_DOWN:
                kierunken = DOWN;
            break;
            case 'q':
                gameover = true;
            break;
        }
    }
}

void Logika() {
    int pXogona=Xogona[0];
    int pYogona=Yogona[0];
    int p2Xogona,p2Yogona;
    //poruszanie ogona
    Xogona[0] = HeadX;
    Yogona[0] = HeadY;
    for (int i = 1; i < Dogona; i++) {
        p2Xogona = Xogona[i];
        p2Yogona = Yogona[i];
        Xogona[i] = pXogona;
        Yogona[i] = pYogona;
        pXogona = p2Xogona;
        pYogona = p2Yogona;

    }
    switch (kierunken) {
        case UP:
            HeadY--;
        break;
        case DOWN:
            HeadY++;
        break;
        case LEFT:
            HeadX--;
        break;
        case RIGHT:
            HeadX++;
        break;

        default:
            break;
    }
    if(HeadX>width || HeadY>height || HeadX<0 || HeadY<0) {
        gameover = true;
    }
    for (int i = 0; i < Dogona; i++) {
        if(Xogona[i] == HeadX && Yogona[i] == HeadY) {
            gameover = true;
        }
    }
        if(HeadX==FX && HeadY==Fy) {
            wynik++;
            FX = rand() % (width);
            Fy = rand() % (height);
            Dogona++;


        }
    }

int main() {
    srand(time(NULL));
Start();
    while(!gameover) {
        Rysowanie();
        Input();
        Logika();

        //fragment odpowiadający za spowolnienie całego kodu
        //niestety wąż poruszał się szybciej w górę i w dół niż w lewo i prawo
        //więc musiałem użyć sleep'a, gra traci na wydajności ale zyskuje na grywalności
        if (kierunken == LEFT || kierunken == RIGHT)
        {
            Sleep(5);
        }
        Sleep(6);
        if (kierunken == UP || kierunken == DOWN)
        {
            Sleep(60);
        }

    }


    return 0;
}

